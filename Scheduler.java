import java.util.Random;import java.util.ArrayList;import java.util.Scanner;import java.util.Iterator;import java.util.Arrays;/** * * @author Hedin-Abreu *///Main classpublic class Scheduler {	public static final String JDBC_DRIVER = "com.mysql.cj.jdbc.Driver";  	public static final String DB_URL = "jdbc:mysql://localhost/";	public static final String USER = "root";	public static final String PASS = "Ichirro69!";	public static final String CSV_URL = "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/Student.csv";	public static final String CREATECOLUMNS_SQL = "CREATE TABLE Students " +		" (studentno INTEGER not NULL, " +		" lastname VARCHAR(255), " + 		" middlename VARCHAR(255), " + 		" firstname VARCHAR(255), " + 		" grade SMALLINT, " + 		" room VARCHAR(255), " + 		" period SMALLINT, " + 		" teacher VARCHAR(255), " + 		" coursetitle VARCHAR(255), " + 		" mark VARCHAR(255), " + 		" casemanager VARCHAR(255), " + 		" id INT AUTO_INCREMENT PRIMARY KEY)";	// Student#,Last Name,Middle Name,First Name,Grade,Room,Period,Course title,Mark1,Case carrier,	public static final String LOADCOLUMNS_SQL = "studentno,lastname,middlename,firstname,grade,room,period,teacher,coursetitle,mark,casemanager";		public static final int STUDENTS_PER_MENTOR = 4;	public static final int MAXCAPACITY = 20;	public static final int DISTRIBUTION_PERIOD = 2; 	public static final int PERIOD_BEFORE_INTERVENTION = 2;	ArrayList<StudentRecord> studentRecords = new ArrayList<StudentRecord>(), originalStudentRecords = new ArrayList<StudentRecord>();  	ArrayList<RoomRecord> roomRecords = new ArrayList<RoomRecord>();	ArrayList<CaseManager> caseManagerRecords = new ArrayList<CaseManager>(); 	StudentAndRoomRecords studentAndRoomRecords = null; 	ArrayList<String> priorityCourses = null, noAssignCourses = null, noAssignRooms = null, overCapacityCourses = null, 		similarMathCourses = null, similarSocialStudiesCourses, similarEnglishCourses, similarFrenchCourses, similarSpanishCourses, 		similarScienceCourses = null, similarHealthCourses = null, similarArtCourses = null, similarDanceCourses = null;	ArrayList<ArrayList<String> > similarCourses = null;		// Constructor	public Scheduler() 	{		Scanner input = new Scanner(System.in);		priorityCourses = new ArrayList<String>(Arrays.asList("bogus") );		noAssignCourses = new ArrayList<String>(Arrays.asList("AcademicMentor", "Academic Mentor", "Supervention", "Cond", "CT", "GCC", 			"LAVC", "TA", "TA/", "Tm", "Tm V Crs Ctry", "CTF", "Unsched Per 0", "PE", "PE 10 to 12", "PE 9", "PE-People Prog") );  		// noAssignRooms not include gym, because multiple teachers are assigned there.  Includes Link Crew rooms, Link Crew director's 		// and leader's rooms and rooms of teachers on supervision. 		noAssignRooms = new ArrayList<String>(Arrays.asList("Office", "1217", "7003", "2306", "2217", "2202", "2113", "9104", "6203", "9102", 			"1153", "2309", "1211", "1213", "1154", "1235", "7114", "2307", "1150", "2206", "6107", "2228", "1224", "1216", "1149") );  		caseManagerRecords = new ArrayList<CaseManager>(Arrays.asList(new CaseManager("Baldwin B", "2329"), 			new CaseManager("Berich E", "2104"), 			new CaseManager("Dawes J", "2115"), 			new CaseManager("Dixon M", "2204"), 			new CaseManager("Gomez J", "8105"), 			new CaseManager("Hollingshed E", "4118"),				new CaseManager("Knatcal D", "2225"), 			new CaseManager("Mucha M", "2107"), 			new CaseManager("Papavasiliou T", "2121"), 			new CaseManager("Popiel M", "1205"), 			new CaseManager("Sunde D", "2317"), 			new CaseManager("Wenzel A", "2106") ) ); 		overCapacityCourses = new ArrayList<String>(Arrays.asList("PE 9", "PE 10 to 12", "Weight Training") );		similarMathCourses = new ArrayList<String>(Arrays.asList("Algebra 1", "Algebra 1 (S)", "Algebra 2", "Algebra 2 (9)", "Geometry", 			"Geometry (S)", "Pre-Calculus", "AP Calculus", "Intro Col Math", "AP Statistics") );		similarSocialStudiesCourses = new ArrayList<String>(Arrays.asList("Wrld Hist", "Wrld Hist (S)", "AP Wrld Hist", "US History", 			"AP US Hist", "AP Eur Hist", "AP GovPol US", "Government", "Economics", "AP Econ", "Sociology") );		similarEnglishCourses = new ArrayList<String>(Arrays.asList("English 9", "English 10", "English 11", "English 12", "English 9 (H)", 			"English 10 (H)", "English 11 (H)", "English 12 (H)", "English 9 (T)", "English 10 (T)", "English 11 (T)", "English 12 (T)", 			"ERWC", "AP Engl Lit", "AP Engl Lang", "ELD 1 Writing", "ELD 2 Writing") );		similarFrenchCourses = new ArrayList<String>(Arrays.asList("French 1", "French 2", "French 3") );		similarSpanishCourses = new ArrayList<String>(Arrays.asList("Spanish 1", "Spanish 2", "Spanish 3", "Spanish Spks 1", 			"Spanish Spks 2", "AP Span Lang") );		similarScienceCourses = new ArrayList<String>(Arrays.asList("Mic/Mar Biology", "Biology", "Biology (S)", "Biology (H)", "Biology 9",			"Biology 9 (S)", "Biology 9 (H)", "AP Biology", "Chemistry", "Chemistry (S)", "Chemistry (H)", "EarthSpaceSci", "EarthSpaceSci(S)",			"Anatomy/Phys", "Physics", "AP Physics 1", "AP Physics 2") );		similarHealthCourses = new ArrayList<String>(Arrays.asList("Health/Cr 9", "Health/Cr 10-12", "CareerMedFldNAF") );		similarArtCourses = new ArrayList<String>(Arrays.asList("Art Structure 1", "Art Structure 2", "APStudio Art", "Photo 1") );		similarDanceCourses = new ArrayList<String>(Arrays.asList("Dance 1", "Dance 2", "Dance 3", "Dance Prod") );		similarCourses = new ArrayList<ArrayList<String> >(Arrays.asList(similarMathCourses, similarSocialStudiesCourses, similarEnglishCourses, 			similarFrenchCourses, similarSpanishCourses, similarScienceCourses, similarHealthCourses, similarArtCourses, similarDanceCourses) );		        //Initialize database		DatabaseManager db = new DatabaseManager(JDBC_DRIVER, DB_URL, USER, PASS, CSV_URL, CREATECOLUMNS_SQL, LOADCOLUMNS_SQL);		// Run SQL queries & gather info for students, intervention courses, and rooms.		studentRecords = db.getStudentRecords(STUDENTS_PER_MENTOR, false, true, DISTRIBUTION_PERIOD, priorityCourses, noAssignCourses, caseManagerRecords) ; 		 		// TO DO: collect students who need intervention and who have a case manager into studentRecordsSPED, and remove them from studentRecords.				roomRecords = db.getRoomRecords(STUDENTS_PER_MENTOR, MAXCAPACITY, studentRecords, noAssignRooms, noAssignCourses, caseManagerRecords);   		originalStudentRecords = new ArrayList<StudentRecord>(studentRecords);  // deep clone original copy.				Assigner a = new Assigner(STUDENTS_PER_MENTOR, MAXCAPACITY);				// Sorts student records, highest to lowest number of students with that course.		System.out.println("\n\nBefore reduction,");		a.printCourseRecordsOverCapacity(studentRecords, roomRecords);		studentRecords = a.reduceOverCapCourses(STUDENTS_PER_MENTOR, MAXCAPACITY, studentRecords, roomRecords);		System.out.println("\nAFTER reduction,");		a.printCourseRecordsOverCapacity(studentRecords, roomRecords);				studentAndRoomRecords = a.assignByUse(overCapacityCourses, studentRecords, roomRecords);		studentRecords = studentAndRoomRecords.studentRecords;		roomRecords = studentAndRoomRecords.roomRecords;		studentAndRoomRecords = a.assignByCorrectIntRoom(MAXCAPACITY, studentRecords, roomRecords);		studentRecords = studentAndRoomRecords.studentRecords;		roomRecords = studentAndRoomRecords.roomRecords;				studentAndRoomRecords = a.assignBySimilar(MAXCAPACITY, similarCourses, studentRecords, roomRecords);		studentRecords = studentAndRoomRecords.studentRecords;		roomRecords = studentAndRoomRecords.roomRecords;				studentAndRoomRecords = a.assignByNonIntRoom(STUDENTS_PER_MENTOR, MAXCAPACITY, studentRecords, roomRecords);		studentRecords = studentAndRoomRecords.studentRecords;		roomRecords = studentAndRoomRecords.roomRecords;		studentAndRoomRecords = a.assignToAny(STUDENTS_PER_MENTOR, MAXCAPACITY, studentRecords, roomRecords);		studentRecords = studentAndRoomRecords.studentRecords;		roomRecords = studentAndRoomRecords.roomRecords;		roomRecords = a.swapForCorrectTeacher(STUDENTS_PER_MENTOR, MAXCAPACITY, PERIOD_BEFORE_INTERVENTION, studentRecords, roomRecords);				studentAndRoomRecords = a.assignToCaseManager(MAXCAPACITY, studentRecords, roomRecords, caseManagerRecords);		studentRecords = studentAndRoomRecords.studentRecords;		roomRecords = studentAndRoomRecords.roomRecords;		a.verifyStudentAssignments(originalStudentRecords, roomRecords, true);				a.allRoomRecordsSummary(roomRecords);				a.allStudentRecordsCSV(roomRecords);	}		public static void main(String args[] )	{		new Scheduler();	}	 }